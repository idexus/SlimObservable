//
// MIT License
// Copyright Pawel Krzywdzinski
//

using System;
using Microsoft.CodeAnalysis;
using System.Text;
using System.Linq;
using System.Collections.Generic;

namespace SlimObservable.Generator
{
    public class ObservableClassGenerator
    {
        public const string DefaultValueAttributeString = "DefaultValueAttribute";
        public const string PropertyCallbackAttributeString = "PropertyCallbackAttribute";
        public const string ObservablePropertiesAttributeString = "ObservablePropertiesAttribute";

        readonly GeneratorExecutionContext context;
        readonly INamedTypeSymbol mainSymbol;

        StringBuilder builder;

        readonly string symbolName = null;
        readonly string namespaceName = null;

        public ObservableClassGenerator(GeneratorExecutionContext context, INamedTypeSymbol symbol)
        {
            this.context = context;
            this.mainSymbol = symbol;

            this.symbolName = symbol.ToDisplayString().Split('.').Last();
            this.namespaceName = mainSymbol.ContainingNamespace.ToDisplayString();
        }

        public void Build()
        {
            builder = new StringBuilder();

            builder.AppendLine("//");
            builder.AppendLine("// <auto-generated>");
            builder.AppendLine("//");
            builder.AppendLine();

            builder.AppendLine("#nullable disable");
            builder.AppendLine();

            GenerateClassNamespace();

            builder.AppendLine();
            builder.AppendLine("#nullable restore");

            context.AddSource($"{mainSymbol.ContainingNamespace.ToDisplayString()}.{Helpers.GetNormalizedFileName(mainSymbol)}.g.cs", builder.ToString());
        }

        void GenerateClassNamespace()
        {
            builder.AppendLine($@"
using SlimObservable;

namespace {namespaceName}
{{
    public partial class {symbolName} : System.ComponentModel.INotifyPropertyChanged
	{{");
            GenerateClassBody();
            builder.AppendLine($@"
    }}
}}");
        }


        void GenerateClassBody()
        {
            GeneratePropertyChanged();
            GenerateProperties();
        }

        void GeneratePropertyChanged() 
        {
            builder.AppendLine($@"
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        private void InvokePropertyChanged(string propertyName)
        {{
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }}
        ");
        }

        // --------------------------------------
        // ---- generate observable properties ----
        // --------------------------------------

        string GetPropertyCallback(ISymbol symbol)
        {
            var attributes = symbol.GetAttributes();
            var attributeData = attributes.FirstOrDefault(e => e.AttributeClass.Name.Equals(PropertyCallbackAttributeString, StringComparison.Ordinal));
            if (attributeData != null)
            {
                var arguments = attributeData.ConstructorArguments;
                if (arguments[0].Value != null) return (string)arguments[0].Value;
            }
            return null;
        }

        string GetDefaultValueString(ISymbol symbol, string typeName)
        {
            var attributes = symbol.GetAttributes();
            var attributeData = attributes.FirstOrDefault(e => e.AttributeClass.Name.Equals(DefaultValueAttributeString, StringComparison.Ordinal));
            if (attributeData != null)
            {

                var value = attributeData.ConstructorArguments[0].Value.ToString();
                if (typeName.Equals("string", StringComparison.Ordinal))
                    value = $"\"{value}\"";
                if (typeName.Equals("double", StringComparison.Ordinal) || typeName.Equals("float", StringComparison.Ordinal) || typeName.Equals("decimal", StringComparison.Ordinal))
                    value = value.Replace(",", ".");
                return value;
            }
            return null;
        }

        void GenerateProperties()
        {
            var observableInterfaces = mainSymbol
                .Interfaces
                .Where(e => e.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(ObservablePropertiesAttributeString, StringComparison.Ordinal)) != null);

            if (observableInterfaces.Count() > 0)
                builder.AppendLine($@"
        // ----- properties -----");

            foreach (var inter in observableInterfaces)
            {
                var properties = inter
                    .GetMembers()
                    .Where(e => e.Kind == SymbolKind.Property);

                foreach (var prop in properties)
                    GeneratePropertyForField((IPropertySymbol)prop);
            }
        }

        void GeneratePropertyForField(IPropertySymbol propertySymbol)
        {
            var name = propertySymbol.Name;
            var camelcaseName = Helpers.CamelCase(name);
            var typeName = propertySymbol.Type.ToDisplayString();
            var callback = GetPropertyCallback(propertySymbol);
            var defaultValueString = GetDefaultValueString(propertySymbol, typeName);

            callback = callback == null ?                     
                    
                    $@"_{camelcaseName} = value;
                    InvokePropertyChanged(nameof({name}));"                     
                    
                    : 
                    
                    @$"
                    var callbackArgs = new PropertyCallbackArgs<{typeName}>(""{name}"", _{camelcaseName}, value);
                    {callback}(this, callbackArgs);
                    if (callbackArgs.NewValue != callbackArgs.OldValue)
                    {{
                        _{camelcaseName} = callbackArgs.NewValue;
                        InvokePropertyChanged(nameof({name}));
                    }}";

            builder.Append($@"
        private {typeName} _{camelcaseName} = {(defaultValueString != null ? $"({typeName}){defaultValueString}" : $"default({typeName})")};
        public {typeName} {name}
        {{
            get {{ return _{camelcaseName}; }}
            set
            {{
                if (_{camelcaseName} != value)
                {{                    
                    {callback}
                }}
            }}
        }}");
        }
    }
}